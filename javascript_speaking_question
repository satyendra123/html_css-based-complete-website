Q.1) what is callback functon
Ans-> Callback() - A callback function is simply a function passed as an argument to another function, which is then invoked (called) inside the outer function to complete
 some kind of routine or action. means agar hum chahte hai ki jab aisa kuch ho tbhi ye wala function mera chalna start ho to hum ek function banayenge jisko call karna hai aur ise dusre function me as a parameter pass kar denge

EX-1                                                            Ex-2 isme hum ek function ko directly pass karte hai          EX-3 in the server and in many places we used it
  function add(a, callback){                                    function add(a, callback){                                     import express from 'express'
  console.log(`we got the number ${a}`);                            console.log(`we got the number ${a}`);                     import dotenv from 'dotenv'
  if(typeof(callback)=='function'){                                 callback()                                                 import cors from 'cors'
    callback()                                                   }                                                              dotenv.config() 
    }                                                                                                                           const app = express()
  add(5,()=>{                                                   const display = ()=>{                                           const port = env.process.PORT
   console.log("we are sending the data");                            console.log("we are sending the data");                   app.use(express.json())
})                                                               }                                                              app.use(cors())
                                                               add(5,display);                                                  app.listen(port,()=>{
o/p- we got the number 5                                       o/p- we got the number 5                                            console.log(`Server is running at http://localhost/${port}`)                      
     we are sending the data                                   we are sending the data                                          })

Note- ye tab bhi kaam karta jab hum simply add(5)
likhte lekin output me hume o/p= we got the number 5 milta

Q.2) what is Clouser
Ans) Closer is a feature in javascript where a function has access to its outer scope even after the outer function has returned.
it is created when a function is defined inside another function (nested function), and the inner function retains access to the variable
in the outer function scope

Ex-1                                                         EX-2 
function show(){                                              function outerfunction(x){
   var j="j is the local variable of outer function"             return function innerfunction(y){
   document.write(j+"<br>")                                              return x+y
   function innerfun(){                                                 }
      var k = "k is a local vari of inner function")             }
      document.write(k+"<br>");                                
      document.write(j+"<br>");                                 const add = outerfunction(5)
     }                                                          const result = add(9)
   innerfun();                                                  console.log(result)
}

show()                                                          o/p= 14

Q.3) what is hoisting
hoisting- javascript will put all the variables outside before compiling.

ex-1                                               Ex-2)                                           Ex-3
console.log(x);                                         var employeeId = 'abc123';                     var employeeId = 'abc123';
const x=5                                               function foo() {                                function foo() {
                                                              employeeId = '123bcd';                               employeeId = '123bcd';
Note- in this it will display 5. means i have                 return;                                              return;
access it before and define it later but then              }                                                       function employeeId() {}
also it is not showing any error                        foo();                                                    }      
                                                        console.log(employeeId);                        foo();
                                                        o/p- 123bcd                                     console.log(employeeId);     
                                                                                                        o/p= abc123

Q.4) what is higher order function = which accepts the callback function as an argument and return something. is called the Hight order function
EX-1  Higher Order Function=                                                        
filter()-
                                                                                                                                                                              reduce method
 let friends = [                                                                                                                                                              let friends = [
                 {name: 'Anna',books: ['Bible', 'Harry potter'],age: 21},                                                                                                                    {name: 'Anna',books: ['Bible', 'Harry potter'],age: 21},
                 {name: 'Bob',books: ['The Hobbit', 'Game of Thrones'],age: 25},                                                                                                             {name: 'Bob',books: ['The Hobbit', 'Game of Thrones'],age: 25},
                 {name: 'Charlie',books: ['Javascript Essentials', 'Eloquent JavaScript'],age: 23}                                                                                           {name: 'Charlie',books: ['Javascript Essentials', 'Eloquent JavaScript'],age: 23}
              ];                                                                                                                                                                            ];

  let booksOfAge25 = friends.filter(friend => friend.age === 25)                                                                                                              let result = friends.reduce((pre, curr) => {
                            .flatMap(friend => friend.books);                                                                                                                               return [...pre, ...curr.books];
                                                                                                                                                                                           //return pre.concat(friend.books);
  console.log(booksOfAge25);                                                                                                                                                              }, []);
                                                                                                                                                                                Note- both will work                                                                                                                                                    console.log(result);   

Q.5) What is Event loop






Q.6) Event handling in javascript








Q.7) what is ES6 and why do we use it
1) let and const function scope or block scope variable declaration
2) arrow function
3) Template literals
4) Destructuring assignment
5) rest and spread operator 
6) import and export module
7) callback function
8) Higher order function
